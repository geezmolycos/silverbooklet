# n页合1页
# 为从左到右、从上到下排列、保持宽高比
# 变量 paper_dim 设定目标纸张大小
# 变量 cx 设定 x 方向分割数量
# 变量 cy 设定 y 方向分割数量
# mu, md, ml, mr 设定纸张边距（mm）
# pu, pd, pl, pr 设定子页边距（mm）
# double 设定是否双面打印

# 计算需要纸的张数
@cx load @cy load mul dup @cells_per_page store
pageamount swap div ceil @papers store
# 计算纸张可用区域
@paper_dim load vecup @paper_dim_h store @paper_dim_w store
@paper_dim_w load @ml load sub @mr load sub @paper_inner_w store
@paper_dim_h load @md load sub @mu load sub @paper_inner_h store
# 获取纸张
@paper_dim load paperdim
@papers load newpaper
@unprocessed putpaper
# 计算每一格外框的长宽
@paper_inner_w load @cx load div dup @cell_outer_w store
@paper_inner_h load @cy load div dup @cell_outer_h store
# 内框长宽
swap
@pl load sub @pr load sub @cell_inner_w store
@pd load sub @pu load sub @cell_inner_h store
# 计算最终渲染的实际大小(保持宽高比)
pagedim vecup swap
@cell_inner_w load swap div swap @cell_inner_h load swap div min # 计算缩放倍率
pagedim mul vecup swap @print_w store @print_h store
@cell_inner_w load @print_w load sub $2 div @cell_print_shift_x store
@cell_inner_h load @print_h load sub $2 div @cell_print_shift_y store
# 计算到第一个位置的变换
@ml load neg
@paper_dim_h load @mu load sub @cell_outer_h load sub neg
vec translate @to_first_place store
# 向右挪一格的变换
@cell_outer_w load neg $0 vec translate @right store
$0 @cell_outer_h load vec translate @down store

@papers load for drop
    @unprocessed $1 takepaper
    @to_first_place load transform
    @cy load for drop
        @next_row @this_row cutpaper
        @this_row takeallpaper
        @cx load $1 sub for drop
            @split_result @temp cutpaper
            @temp takeallpaper
            @right load transform
        rof
        @split_result putpaper
        @next_row takeallpaper
        @down load transform
    rof
    @scrap putpaper
rof
@split_result takeallpaper
reversepaper
@print_w load @print_h load vec scale
@pl load @pd load vec translate mul
@cell_print_shift_x load @cell_print_shift_y load vec translate mul
printaffine
@double load dup if
    printdoublex
fi not if
    print1
fi